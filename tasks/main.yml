---
# tasks file for jedimt.kubernetes_prep

# Install required packages
- name: Install prerequisite packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - lsscsi
      - jq
      - arping
    state: present
    update_cache: true
    cache_valid_time: 3600
  tags: apt

- name: Create keyrings directory if it does not exist
  ansible.builtin.file:
    path: /usr/share/keyrings/
    state: directory
    mode: '0755'

# The Docker key and repo must be added to install containerd
- name: Add Docker GPG key
  ansible.builtin.get_url:
    url: "{{ docker_gpg_url }}"
    dest: /usr/share/keyrings/docker.asc
    mode: '0755'
    force: true
  register: apt_result
  until: apt_result is success
  tags: docker_gpg

# The Docker key and repo must be added to install containerd
- name: Add Docker APT repository
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64 signed-by=/usr/share/keyrings/docker.asc]
          https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable
    state: present

- name: Add K8s GPG key
  ansible.builtin.get_url:
    url: "{{ k8s_gpg_url }}"
    dest: "/usr/share/keyrings/kubernetes.gpg"
    mode: '0644'
    force: true
  register: apt_result
  until: apt_result is success
  tags: k8s_gpg

- name: Add K8s APT repository
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/usr/share/keyrings/kubernetes.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
  tags: k8s_gpg

# Containerd configuration
# Populate containerd.conf file

- name: Check for containerd.conf
  ansible.builtin.command:
    cat /etc/modules-load.d/containerd.conf
  register: containerd_check
  failed_when: containerd_check.rc > 2
  changed_when: false

- name: Populate /etc/modules-load.d/containerd.conf
  ansible.builtin.shell:
    cmd: |
      cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
      overlay
      br_netfilter
      EOF
  when: "'overlay\nbr_netfilter' not in containerd_check.stdout"
  changed_when: true

- name: Load br_netfilter module if not present
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Load overlay module if not present
  community.general.modprobe:
    name: overlay
    state: present

- name: Check for existing iptables config
  ansible.builtin.command:
    cat /etc/sysctl.d/99-kubernetes-cri.conf
  register: cri_test
  failed_when: cri_test.rc > 1
  changed_when: false

- name: Enable iptables to see briged traffic
  ansible.builtin.shell:
    cmd: |
      cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF
  when: "'net.' not in cri_test.stdout"
  changed_when: true

- name: Reload sysctl to pick up iptables changes
  ansible.builtin.command: "sysctl --system"
  when: "'net.' not in cri_test.stdout"
  changed_when: true

# Check to see if the docker.service.d file exists. If so
# assume its set up correctly and skip restarting Docker since this
# causes issues if re-running the playbook.
- name: Check for existing systemd driver
  ansible.builtin.stat:
    path: /etc/systemd/system/docker.service.d
  register: docker_installed
  tags:
    - docker
    - docker_check

- name: Install containerd CRI runtime
  ansible.builtin.apt:
    name:
      - containerd.io
    state: present
    update_cache: true
  tags:
    - docker
    - containerd

- name: Check for existing config.toml file
  ansible.builtin.command:
    cat /etc/containerd/config.toml
  register: toml_check
  failed_when: toml_check.rc > 1
  changed_when: false
  tags: change_test

# Configure containerd
- name: Create /etc/containerd file
  ansible.builtin.file:
    path: "/etc/containerd"
    mode: '644'
    state: touch
  when: toml_check.rc != 0
  tags: change_test

- name: Configure containerd
  ansible.builtin.shell:
    cmd: |
      containerd config default | tee /etc/containerd/config.toml
  when: "'SystemdCgroup = true' not in toml_check.stdout"
  changed_when: true
  tags: change_test

# Statically define systemd as cgroup driver for containerd
- name: Set runc as systemd cgroup driver
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    search_string: "SystemdCgroup = false"
    line: "            SystemdCgroup = true"
  register: toml_change
  tags:
    - containerd
    - change_test

- name: Restart containerd
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: true
    name: containerd
  when: "'SystemdCgroup = true' not in toml_check.stdout"

# Kubernetes specific work
- name: Check for existing swap devices
  ansible.builtin.command: cat /proc/swaps
  register: swap_results
  changed_when: false
  tags: change_test

# Kubernetes specific work
- name: Turn off swap device (required for K8s)
  ansible.builtin.command: swapoff -a
  when: "'swap' in swap_results.stdout"
  changed_when: true
  tags: change_test

- name: Disable SWAP in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  when: "'swap' in swap_results.stdout"
  tags: change_test

- name: Install kubeadm, kubelet, kubectl
  ansible.builtin.apt:
    name:
      - kubelet={{ k8sversion }}
      - kubeadm={{ k8sversion }}
      - kubectl={{ k8sversion }}
    state: present
    update_cache: true

- name: Enable apt-mark hold for K8s binaries
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubelet
    - kubeadm
    - kubectl
  tags: apt_mark

- name: Turn off firewall
  community.general.ufw:
    state: disabled
